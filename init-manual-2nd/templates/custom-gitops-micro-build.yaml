apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    meta.helm.sh/release-name: init-manual-two
    meta.helm.sh/release-namespace: default
    tekton.dev/categories: Git
    tekton.dev/displayName: git cli
    tekton.dev/pipelines.minVersion: 0.21.0
    tekton.dev/platforms: linux/amd64,linux/s390x,linux/ppc64le
    tekton.dev/tags: git
  creationTimestamp: "2022-07-22T06:00:44Z"
  generation: 2
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/version: "0.3"
    operator.tekton.dev/provider-type: community
  name: custom-gitops-micro-build
spec:
  description: |-
    This task can be used to perform git operations.
    Git command that needs to be run can be passed as a script to the task. This task needs authentication to git in order to push after the git operation.
  params:
  - default: docker.io/alpine/git:v2.26.2@sha256:23618034b0be9205d9cc0846eb711b12ba4c9b468efdd8a59aac1d7b1a23363f
    description: |
      The base image for the task.
    name: BASE_IMAGE
    type: string
  - description: Folder to do the work in.
    name: folder
    type: string
  - default: root
    description: |
      Git user name for performing git operation.
    name: GIT_USER_NAME
    type: string
  - default: root@graffiti.net
    description: |
      Git user email for performing git operation.
    name: GIT_USER_EMAIL
    type: string
  - default: /root
    description: |
      Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
      the gitInitImage param with an image containing custom user configuration.
    name: USER_HOME
    type: string
  - default: "true"
    description: Log the commands that are executed during `git-clone`'s operation.
    name: VERBOSE
    type: string
  - default: "true"
    description: Clean out the contents of the destination directory if it already
      exists before cloning.
    name: deleteExisting
    type: string
  - description: The event type
    name: object_kind
    type: string
  - description: the git ssh url
    name: git_ssh_url
    type: string
  - description: The source branch name
    name: source_branch
    type: string
  - description: The target branch name
    name: target_branch
    type: string
  - description: The commit sha
    name: merge_commit_sha
    type: string
  - description: User name who generated pipeline.
    name: user_name
    type: string
  - description: the gitlab project id
    name: project_id
    type: string
  - description: The branch
    name: ref
    type: string
  - description: action
    name: action
    type: string
  results:
  - description: The precise commit SHA after the git operation.
    name: commit
  steps:
  - env:
    - name: PARAM_VERBOSE
      value: $(params.VERBOSE)
    - name: PARAM_USER_HOME
      value: $(params.USER_HOME)
    - name: WORKSPACE_OUTPUT_PATH
      value: $(workspaces.output.path)
    - name: WORKSPACE_SSH_DIRECTORY_BOUND
      value: $(workspaces.ssh-directory.bound)
    - name: WORKSPACE_SSH_DIRECTORY_PATH
      value: $(workspaces.ssh-directory.path)
    - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
      value: $(workspaces.basic-auth.bound)
    - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
      value: $(workspaces.basic-auth.path)
    - name: CHECKOUT_DIR
      value: $(workspaces.output.path)
    - name: PARAM_DELETE_EXISTING
      value: $(params.deleteExisting)
    image: $(params.BASE_IMAGE)
    name: git
    resources: {}
    script: |
      #!/usr/bin/env sh
      set -x
      echo "###############################################"
      echo "###############################################"
      echo "### project_id = $(params.project_id)"
      echo "### user_name = $(params.user_name)"
      echo "### object_kind = $(params.object_kind)"
      echo "### git_ssh_url = $(params.git_ssh_url)"
      echo "### source_branch = $(params.source_branch)"
      echo "### target_branch = $(params.target_branch)"
      echo "### merge_commit_sha = $(params.merge_commit_sha)"
      echo "### action = $(params.action)"
      echo "### ref = $(params.ref)"
      echo "###############################################"
      echo "###############################################"

      set -eu
      apk update
      apk add gettext
      if [ "${PARAM_VERBOSE}" = "true"] ; then
        set -x
      fi

      git config --global user.email "$(params.GIT_USER_EMAIL)"
      git config --global user.name "$(params.GIT_USER_NAME)"

      # cleandir() {
      #   # Delete any existing contents of the repo directory if it exists.
      #   # We don't just "rm -rf ${CHECKOUT_DIR}\" because ${CHECKOUT_DIR} might be "/"
      #   # or the root of a mounted volume.
      #   if [ -d "${CHECKOUT_DIR}" ] ; then
      #     # Delete non-hidden files and directories
      #     rm -rf "${CHECKOUT_DIR:?}"/*
      #     rm -rf "${CHECKOUT_DIR}"/*
      #     # Delete files and directories starting with . but excluding ..
      #     rm -rf "${CHECKOUT_DIR}"/.[!.]*
      #     # Delete files and directories starting with .. plus any other character
      #     rm -rf "${CHECKOUT_DIR}"/..?*
      #   fi
      # }

      # cleandir

      cd /workspace/output/$(params.folder)/base
      . ./.build-variables.env
      cd ..
      #export GIT_REPO_NAME="online-boutique-cd"
      echo "git $(params.git_ssh_url)"
      echo 'ssh -i ~/.ssh/id_ssh-key -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $*' > /tmp/ssh
      chmod +x /tmp/ssh
      #GIT_TRACE=1 GIT_SSH='/tmp/ssh' git clone "$(params.git_ssh_url)"
      mkdir deploy;cd deploy
      GIT_TRACE=1 GIT_SSH='/tmp/ssh' git clone "$(params.git_ssh_url)" .
      cd ../base
      branch=`echo "$(params.ref)"| cut -d'/' -f 3`
      git checkout $branch
      cd ../deploy
      git checkout $branch
      #. online-boutique-cd/.build-variables.env
      
      for micros in `ls ../base|grep -i app-`
      do
        echo "Processing microservice - $micros"
        # #CHECK IF DEPLOY BRANCH EXISTS. IF NOT, CREATE IT LOCALLY
        DEPLOY_BRANCH_EXISTS=$(GIT_SSH='/tmp/ssh' git ls-remote --heads "$(params.git_ssh_url)" $ENV-$TIER-$micros | wc -l)
        if [ $DEPLOY_BRANCH_EXISTS -eq 1 ]
        then
          git checkout --track origin/$ENV-$TIER-$micros
          echo "Branch exists $ENV-$TIER-$micros, templating files and creating helm chart."
        else
          git checkout -b $ENV-$TIER-$micros
          echo "Checking out new branch $ENV-$TIER-$micros"
        fi
        rm -rf *
        mkdir app
        mkdir app/conf
        cp -r ../base/.gitops-data/* app
        cp ../base/$micros/helm-values.conf app/conf/helm-values-original.conf
        . app/conf/helm-values-original.conf
        cp ../base/$micros/helm-values.template app/conf
        envsubst < app/conf/helm-values.template > app/conf/helm-values.conf
        envsubst < app/values_original.yaml > app/values.yaml
        cat app/values.yaml
        git add -A
        git diff-index --quiet HEAD || git commit -m 'Updating microservice variables.'
        GIT_SSH='/tmp/ssh' git remote set-url --push origin "$(params.git_ssh_url)"
        GIT_SSH='/tmp/ssh' git push origin $ENV-$TIER-$micros
      done
    workingDir: $(workspaces.output.path)
  workspaces:
  - description: A workspace that contains the fetched git repository.
    name: output
  - description: |
      An optional workspace that contains the files that need to be added to git. You can
      access the workspace from your script using `$(workspaces.input.path)`, for instance:

        cp $(workspaces.input.path)/file_that_i_want .
        git add file_that_i_want
        # etc
    name: input
    optional: true
  - description: |
      A .ssh directory with private key, known_hosts, config, etc. Copied to
      the user's home before git commands are executed. Used to authenticate
      with the git remote when performing the clone. Binding a Secret to this
      Workspace is strongly recommended over other volume types.
    name: ssh-directory
    optional: true
  - description: |
      A Workspace containing a .gitconfig and .git-credentials file. These
      will be copied to the user's home before any git commands are run. Any
      other files in this Workspace are ignored. It is strongly recommended
      to use ssh-directory over basic-auth whenever possible and to bind a
      Secret to this Workspace over other volume types.
    name: basic-auth
    optional: true