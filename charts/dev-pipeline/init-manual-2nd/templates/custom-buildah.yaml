apiVersion: tekton.dev/v1beta1
kind: ClusterTask
metadata:
  annotations:
    tekton.dev/pipelines.minVersion: 0.12.1
    tekton.dev/tags: image-build
  generation: 6
  labels:
    app.kubernetes.io/version: "0.1"
    operator.tekton.dev/provider-type: redhat
  name: custom-buildah
spec:
  description: |-
    Buildah task builds source into a container image and then pushes it to a container registry.
    Buildah Task builds source into a container image using Project Atomic's Buildah build tool.It uses Buildah's support for building from Dockerfiles, using its buildah bud command.This command executes the directives in the Dockerfile to assemble a container image, then pushes that image to a container registry.
  params:
  - description: Folder to do the work in.
    name: folder
    type: string
  - description: Reference of the image buildah will produce.
    name: image
    type: string
  - default: registry.redhat.io/rhel8/buildah@sha256:23fb7971ea6ac4aaaaa1139473a602df0df19222a3b5a76b551b2b9ddd92e927
    description: The location of the buildah builder image.
    name: BUILDER_IMAGE
    type: string
  - default: vfs
    description: Set buildah storage driver
    name: STORAGE_DRIVER
    type: string
  - default: ./Dockerfile
    description: Path to the Dockerfile to build.
    name: DOCKERFILE
    type: string
  - default: .
    description: Path to the directory to use as context.
    name: CONTEXT
    type: string
  - default: "true"
    description: Verify the TLS on the registry endpoint (for push/pull to a non-TLS
      registry)
    name: TLSVERIFY
    type: string
  - default: oci
    description: The format of the built container, oci or docker
    name: FORMAT
    type: string
  - default: ""
    description: Extra parameters passed for the build command when building images.
    name: BUILD_EXTRA_ARGS
    type: string
  - default: ""
    description: Extra parameters passed for the push command when pushing images.
    name: PUSH_EXTRA_ARGS
    type: string
  - description: The event type
    name: object_kind
    type: string
  - description: The event type
    name: action
    type: string
  - description: the git ssh url
    name: git_ssh_url
    type: string
  - description: The branch
    name: ref
    type: string
  - description: The branch
    name: tag
    type: string
  - description: The branch
    name: tag_name
    type: string
  - description: the gitlab project id
    name: project_id
    type: string
  - description: the gitlab project id
    name: user_name
    type: string
  results:
  - description: Digest of the image just built.
    name: IMAGE_DIGEST
  steps:
  - image: $(params.BUILDER_IMAGE)
    name: build
    resources: {}
    script: |
      echo "###############################################"
      echo "###############################################"
      if [ "$(params.action)" == "published" ]; then
        tag="$(params.tag)"
        echo "### webhook = $(params.object_kind)"
        echo "### tag = $(params.tag)"
        echo "### tag_name = $(params.tag_name)"
        echo "### action = $(params.action)"
        echo "### git_ssh_url = $(params.git_ssh_url)"
        echo "### user_name = $(params.user_name)"
        echo "### branch = $(params.ref)"
        echo "### project_id = $(params.project_id)"
        echo "### folder = $(params.folder)"
      fi
      echo "###############################################"
      echo "###############################################"
      cd /workspace/output/$(params.folder)/base
      if [ ! -f Dockerfile ]; then
        cd src
      fi

      build=""
      if [ -f build-args.txt ]; then
        while read line
        do
          build=$build"--build-arg $line "
        done < build-args.txt
      fi
      buildah --storage-driver=$(params.STORAGE_DRIVER) bud $build\
        --format=$(params.FORMAT) \
        --tls-verify=$(params.TLSVERIFY) --no-cache \
        -f $(params.DOCKERFILE) -t $(params.image):$tag $(params.CONTEXT)
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.output.path)
  - image: $(params.BUILDER_IMAGE)
    name: push
    resources: {}
    script: |
      echo "###############################################"
      echo "###############################################"
      if [ "$(params.action)" == "published" ]; then
        tag="$(params.tag)"
        echo "### tag = $(params.tag)"
        echo "### tag_name = $(params.tag_name)"
        echo "### action = $(params.action)"  
        echo "### git_ssh_url = $(params.git_ssh_url)"
        echo "### user_name = $(params.user_name)"
        echo "### branch = $(params.ref)"
        echo "### project_id = $(params.project_id)"
      fi
      echo "###############################################"
      echo "###############################################"

      buildah login -p glpat-a9zRroMu4vrDLB8QZseY -u pafoster registry.gitlab.com/redhat-blackbelt/helm-repository/helm-repo
      buildah --storage-driver=$(params.STORAGE_DRIVER) push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        --digestfile $(workspaces.output.path)/$(params.folder)/image-digest $(params.image):$tag \
        docker://$(params.image):latest
      buildah --storage-driver=$(params.STORAGE_DRIVER) push \
        $(params.PUSH_EXTRA_ARGS) --tls-verify=$(params.TLSVERIFY) \
        --digestfile $(workspaces.output.path)/$(params.folder)/image-digest $(params.image):$tag \
        docker://$(params.image):$tag
    volumeMounts:
    - mountPath: /var/lib/containers
      name: varlibcontainers
    workingDir: $(workspaces.output.path)
  - image: $(params.BUILDER_IMAGE)
    name: digest-to-results
    resources: {}
    script: cat $(workspaces.output.path)/$(params.folder)/image-digest | tee /tekton/results/IMAGE_DIGEST
  volumes:
  - emptyDir: {}
    name: varlibcontainers
  workspaces:
  - name: output
